CREATE TABLE IF NOT EXISTS BillingService (
    bs_id                             INT PRIMARY KEY,
    bs_date                           DATE,
    bs_revenue                        DECIMAL(9,2)
);

CREATE TABLE IF NOT EXISTS Album (
    l_name                            VARCHAR(128) PRIMARY KEY,
    l_release_year                    DATE NOT NULL,
    l_edition                         VARCHAR(128) CHECK (l_edition IN ('Special', 'Limited', 'Collector'))
);

CREATE TABlE IF NOT EXISTS RecordLabel (
    rl_name                           VARCHAR(128) PRIMARY KEY
);

CREATE TABLE IF NOT EXISTS User (
    u_email_id                        VARCHAR(128) PRIMARY KEY,
    u_first_name                      VARCHAR(128) NOT NULL,
    u_last_name                       VARCHAR(128) NOT NULL,
    u_reg_date                        DATE         NOT NULL,
    u_subscription_status             VARCHAR(128) DEFAULT 'INACTIVE',
    u_phone                           DECIMAL(10,0)
);

CREATE TABLE IF NOT EXISTS Podcast (
    p_name                            VARCHAR(128) PRIMARY KEY,
    p_sponsor                         DECIMAL(9,2) DEFAULT 0,
    p_language                        VARCHAR(128),
    p_country                         VARCHAR(128),
    p_genre                           VARCHAR(128),
    p_rating                          FLOAT,
    p_rated_user_count                INT          DEFAULT 0
);

CREATE TABLE IF NOT EXISTS PodcastHost (
    ph_email_id                       VARCHAR(128) PRIMARY KEY,
    ph_first_name                     VARCHAR(128) NOT NULL,
    ph_last_name                      VARCHAR(128) NOT NULL,
    ph_phone                          DECIMAL(10,0),
    ph_city                           VARCHAR(128)
);

CREATE TABLE IF NOT EXISTS SpecialGuest (
    g_email_id                        VARCHAR(128) PRIMARY KEY,
    g_name                            VARCHAR(128) NOT NULL
);

CREATE TABLE IF NOT EXISTS Song (
    s_id                              INT PRIMARY KEY,
    s_title                           VARCHAR(128) NOT NULL,
    s_royalty_rate                    DECIMAL(9,2) NOT NULL,
    s_royalty_paid_status             BOOLEAN DEFAULT FALSE,
    s_duration                        TIME,
    s_genre                           VARCHAR(128),
    s_release_date                    DATE,
    s_country                         VARCHAR(128),
    s_language                        VARCHAR(128),
    l_name                            VARCHAR(128),
    track_number                      INT,
    FOREIGN KEY(l_name) REFERENCES Album(l_name) ON UPDATE CASCADE ON DELETE CASCADE,
    CHECK(
        (l_name IS NULL AND track_number IS NULL) OR
        (l_name IS NOT NULL AND track_number IS NOT NULL)
    )
);

CREATE TABLE IF NOT EXISTS Artist (
    a_email_id                        VARCHAR(128) PRIMARY KEY,
    a_name                            VARCHAR(128) NOT NULL,
    a_status                          VARCHAR(128) DEFAULT 'ACTIVE',
    a_country                         VARCHAR(128),
    a_primary_genre                   VARCHAR(128),
    rl_name                           VARCHAR(128),
    FOREIGN KEY(rl_name) REFERENCES RecordLabel(rl_name) ON UPDATE CASCADE ON DELETE CASCADE +
);

CREATE TABLE IF NOT EXISTS PodcastEpisode (
    pe_title                          VARCHAR(128),
    p_name                            VARCHAR(128) NOT NULL,
    pe_release_date                   DATE         NOT NULL,
    pe_ad_count                       INT          DEFAULT 0,
    pe_duration                       VARCHAR(128),
    ph_email_id                       VARCHAR(128),
    PRIMARY KEY(p_name, pe_title),
    FOREIGN KEY(p_name)      REFERENCES Podcast(p_name)          ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(ph_email_id) REFERENCES PodcastHost(ph_email_id) ON UPDATE CASCADE ON DELETE CASCADE +
);

CREATE TABLE IF NOT EXISTS pays_to (
    up_fee_for_subscription           FLOAT        DEFAULT 100,
    up_date                           DATE,
    bs_id                             INT,
    u_email_id                        VARCHAR(128),
    PRIMARY KEY(u_email_id, bs_id, up_date),
    FOREIGN KEY(bs_id)      REFERENCES BillingService(bs_id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(u_email_id) REFERENCES User(u_email_id)      ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS pays_to_host (
    pfh_amount                        FLOAT        NOT NULL,
    pfh_date                          DATE,
    bs_id                             INT,
    ph_email_id                       VARCHAR(128),
    PRIMARY KEY(ph_email_id, bs_id, pfh_date),
    FOREIGN KEY(bs_id)       REFERENCES BillingService(bs_id)    ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(ph_email_id) REFERENCES PodcastHost(ph_email_id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS pays_to_record_label (
    pfs_amount                        FLOAT        NOT NULL,
    pfs_date                          DATE,
    bs_id                             INT,
    rl_name                           VARCHAR(128),
    PRIMARY KEY(rl_name, bs_id, pfs_date),
    FOREIGN KEY(bs_id)   REFERENCES BillingService(bs_id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(rl_name) REFERENCES RecordLabel(rl_name)  ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS pays_to_artist (
    pfa_amount                        FLOAT        NOT NULL,
    pfa_date                          DATE,
    rl_name                           VARCHAR(128),
    a_email_id                        VARCHAR(128),
    PRIMARY KEY(a_email_id, rl_name, pfa_date),
    FOREIGN KEY(rl_name)    REFERENCES RecordLabel(rl_name) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(a_email_id) REFERENCES Artist(a_email_id)   ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS collects_song_data (
    bs_id                             INT,
    s_id                              INT,
    PRIMARY KEY(bs_id, s_id),
    FOREIGN KEY(bs_id) REFERENCES BillingService(bs_id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(s_id)  REFERENCES Song(s_id)            ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS listens_to_song (
    u_email_id                        VARCHAR(128),
    s_id                              INT,
    ls_date                           DATE         ,
    ls_play_count                     INT          DEFAULT 1,
    PRIMARY KEY(u_email_id, s_id, ls_date),
    FOREIGN KEY(u_email_id) REFERENCES User(u_email_id) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(s_id)       REFERENCES Song(s_id)       ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS collects_episode_data (
    pe_title                          VARCHAR(128),
    p_name                            VARCHAR(128),
    bs_id                             INT,
    PRIMARY KEY(p_name, pe_title, bs_id),
    INDEX f1(p_name, pe_title), INDEX f2(bs_id), +
    FOREIGN KEY(p_name, pe_title) REFERENCES PodcastEpisode(p_name, pe_title) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(bs_id)            REFERENCES BillingService(bs_id)            ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS listens_to_podcast_episode (
    pe_title                           VARCHAR(128),
    p_name                             VARCHAR(128),
    u_email_id                         VARCHAR(128),
    lpe_date                           DATE         NOT NULL,
    lpe_play_count                     INT          DEFAULT 1,
    PRIMARY KEY(p_name, pe_title, u_email_id, lpe_date),
    INDEX f1(p_name, pe_title), INDEX f2(u_email_id), +
    FOREIGN KEY(p_name,pe_title) REFERENCES PodcastEpisode(p_name,pe_title) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(u_email_id)      REFERENCES User(u_email_id)                ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS sings (
    s_id                               INT,
    a_email_id                         VARCHAR(128),
    is_artist_collaborator_for_song    BOOLEAN      NOT NULL,
    artist_type_for_song               VARCHAR(128) NOT NULL CHECK (artist_type_for_song IN ('Musician', 'Composer', 'Band')),
    PRIMARY KEY(s_id, a_email_id),
    FOREIGN KEY(s_id)       REFERENCES Song(s_id)         ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(a_email_id) REFERENCES Artist(a_email_id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS assigned_to (
    a_email_id                         VARCHAR(128),
    l_name                             VARCHAR(128),
    PRIMARY KEY(a_email_id, l_name),
    FOREIGN KEY(l_name)     REFERENCES Album(l_name)      ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(a_email_id) REFERENCES Artist(a_email_id) ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS features (
    pe_title                           VARCHAR(128),
    p_name                             VARCHAR(128),
    g_email_id                         VARCHAR(128),
    PRIMARY KEY(p_name, pe_title, g_email_id),
    INDEX f1(p_name, pe_title),INDEX f2(g_email_id), +
    FOREIGN KEY(p_name, pe_title) REFERENCES PodcastEpisode(p_name, pe_title) ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY(g_email_id)       REFERENCES SpecialGuest(g_email_id)         ON UPDATE CASCADE ON DELETE CASCADE 
);




-- CREATE TABlE IF NOT EXISTS RecordLabel (
--     rl_name                           VARCHAR(128)  PRIMARY KEY
-- );

-- CREATE TABLE IF NOT EXISTS User (
--     u_email_id                        VARCHAR(128)  PRIMARY KEY,
--     u_first_name                      VARCHAR(128)  NOT NULL,
--     u_last_name                       VARCHAR(128)  NOT NULL,
--     u_reg_date                        DATE          NOT NULL,
--     u_subscription_status             VARCHAR(128)  DEFAULT 'ACTIVE',
--     u_phone                           DECIMAL(10,0)
-- );

-- CREATE TABLE  IF NOT EXISTS Podcast (
--     p_name                            VARCHAR(128)  PRIMARY KEY,
--     p_subscriber_count                INT           DEFAULT 0,
--     p_episode_count                   INT           DEFAULT 0,
--     p_sponsor                         DECIMAL(9,2)  DEFAULT 0,
--     p_language                        VARCHAR(128),
--     p_country                         VARCHAR(128),
--     p_genre                           VARCHAR(128),
--     p_rating                          INT           CHECK (p_rating >= 0 AND p_rating <= 5)
-- );

-- CREATE TABLE IF NOT EXISTS PodcastHost (
--     ph_email_id                       VARCHAR(128)  PRIMARY KEY,
--     ph_first_name                     VARCHAR(128)  NOT NULL,
--     ph_last_name                      VARCHAR(128)  NOT NULL,
--     ph_phone                          DECIMAL(10,0),
--     ph_city                           VARCHAR(128)
-- );

-- CREATE TABLE  IF NOT EXISTS SpecialGuest (
--     g_email_id                        VARCHAR(128)  PRIMARY KEY,
--     g_name                            VARCHAR(128)  NOT NULL
-- );

-- CREATE TABLE IF NOT EXISTS Song (
--     s_id                              INT           PRIMARY KEY,
--     s_title                           VARCHAR(128)  NOT NULL,
--     s_royalty_rate                    DECIMAL(9,2)  NOT NULL,
--     s_royalty_paid_status             BOOLEAN       DEFAULT FALSE,
--     s_play_count                      INT           DEFAULT 0,
--     l_name                            VARCHAR(128),
--     track_number                      INT,
--     s_duration                        TIME,
--     s_genre                           VARCHAR(128),
--     s_release_date                    DATE,
--     s_country                         VARCHAR(128),
--     s_language                        VARCHAR(128),
--     FOREIGN KEY(l_name) REFERENCES Album(l_name)
--     ON UPDATE CASCADE ON DELETE CASCADE,
--     CHECK(
--         (l_name IS NULL AND track_number IS NULL) OR
--         (l_name IS  NOT NULL AND track_number IS  NOT NULL)
--     )
-- );

-- CREATE TABLE  IF NOT EXISTS Artist (
--     a_email_id                        VARCHAR(128)  PRIMARY KEY,
--     a_name                            VARCHAR(128)  NOT NULL,
--     a_status                          VARCHAR(128)  DEFAULT 'ACTIVE',
--     a_monthly_listeners               INT           DEFAULT 0,
--     a_country                         VARCHAR(128),
--     a_primary_genre                   VARCHAR(128),
--     rl_name                           VARCHAR(128),
--     FOREIGN KEY(rl_name) REFERENCES RecordLabel(rl_name)
--         ON UPDATE CASCADE ON DELETE CASCADE
-- );

-- CREATE TABLE IF NOT EXISTS PodcastEpisode (
--     pe_title                          VARCHAR(128),
--     pe_release_date                   DATE          NOT NULL,
--     p_name                            VARCHAR(128)  NOT NULL,
--     ph_email_id                       VARCHAR(128)  NOT NULL,
--     pe_monthly_listeners              INT           DEFAULT 0,
--     pe_ad_count                       INT           DEFAULT 0,
--     pe_duration                       VARCHAR(128),
--     PRIMARY KEY(p_name, pe_title),
--     FOREIGN KEY(p_name) REFERENCES Podcast(p_name)
--         ON UPDATE CASCADE ON DELETE CASCADE,
--     FOREIGN KEY(ph_email_id) REFERENCES PodcastHost(ph_email_id)
--         ON UPDATE CASCADE ON DELETE CASCADE)
-- );

-- CREATE TABLE  IF NOT EXISTS pays_to (
--     up_id                             INT           PRIMARY KEY,
--     up_fee_for_subscription           INT           DEFAULT 100,
--     up_date                           DATE          NOT NULL,
--     bs_id                             INT           NOT NULL,
--     u_email_id                        VARCHAR(128)  NOT NULL,
--     FOREIGN KEY(bs_id) REFERENCES BillingService(bs_id)
--         ON UPDATE CASCADE ON DELETE CASCADE,
--     FOREIGN KEY(u_email_id) REFERENCES User(u_email_id)
--         ON UPDATE CASCADE ON DELETE CASCADE
-- );

-- CREATE TABLE IF NOT EXISTS pays_to_host (
--     pfh_id                            INT           PRIMARY KEY,
--     pfh_amount                        INT           NOT NULL,
--     pfh_date                          DATE          NOT NULL,
--     bs_id                             INT           NOT NULL,
--     ph_email_id                       VARCHAR(128)  NOT NULL,
--     FOREIGN KEY(bs_id) REFERENCES BillingService(bs_id)
--         ON UPDATE CASCADE ON DELETE CASCADE,
--     FOREIGN KEY(ph_email_id) REFERENCES PodcastHost(ph_email_id)
--         ON UPDATE CASCADE ON DELETE CASCADE
-- );

-- CREATE TABLE IF NOT EXISTS pays_to_record_label (
--     pfs_id                            INT           PRIMARY KEY,
--     pfs_amount                        INT           NOT NULL,
--     pfs_date                          DATE          NOT NULL,
--     bs_id                             INT           NOT NULL,
--     rl_name                           VARCHAR(128)  NOT NULL,
--     FOREIGN KEY(bs_id) REFERENCES BillingService(bs_id)
--         ON UPDATE CASCADE ON DELETE CASCADE,
--     FOREIGN KEY(rl_name) REFERENCES RecordLabel(rl_name)
--         ON UPDATE CASCADE ON DELETE CASCADE
-- );

-- CREATE TABLE IF NOT EXISTS pays_to_artist (
--     pfa_id                            INT           PRIMARY KEY,
--     pfa_amount                        INT           NOT NULL,
--     pfa_date                          DATE          NOT NULL,
--     rl_name                           VARCHAR(128)  NOT NULL,
--     a_email_id                        VARCHAR(128)  NOT NULL,
--     FOREIGN KEY(rl_name) REFERENCES RecordLabel(rl_name)
--         ON UPDATE CASCADE ON DELETE CASCADE,
--     FOREIGN KEY(a_email_id) REFERENCES Artist(a_email_id)
--         ON UPDATE CASCADE ON DELETE CASCADE
-- );

-- CREATE TABLE IF NOT EXISTS collects_song_data (
--     bs_id                             INT,
--     s_id                              INT,
--     PRIMARY KEY(bs_id, s_id),
--     FOREIGN KEY(bs_id) REFERENCES BillingService(bs_id)
--         ON UPDATE CASCADE ON DELETE CASCADE,
--     FOREIGN KEY(s_id) REFERENCES Song(s_id)
--         ON UPDATE CASCADE ON DELETE CASCADE
-- );

-- CREATE TABLE IF NOT EXISTS listens_to_song (
--     u_email_id                        VARCHAR(128),
--     s_id                              INT,
--     ls_date                           DATE          NOT NULL,
--     PRIMARY KEY(u_email_id, s_id),
--     FOREIGN KEY(u_email_id) REFERENCES User(u_email_id)
--         ON UPDATE CASCADE ON DELETE CASCADE,
--     FOREIGN KEY(s_id) REFERENCES Song(s_id)
--         ON UPDATE CASCADE ON DELETE CASCADE
-- );

-- CREATE TABLE IF NOT EXISTS collects_episode_data (
--     pe_title                          VARCHAR(128),
--     p_name                            VARCHAR(128),
--     bs_id                             INT,
--     PRIMARY KEY(p_name, pe_title, bs_id),
--     INDEX f1(p_name, pe_title),
--     INDEX f2(bs_id),
--     FOREIGN KEY(p_name, pe_title) REFERENCES PodcastEpisode(p_name, pe_title)
--         ON UPDATE CASCADE ON DELETE CASCADE,
--     FOREIGN KEY(bs_id) REFERENCES BillingService(bs_id)
--         ON UPDATE CASCADE ON DELETE CASCADE
-- );

-- CREATE TABLE IF NOT EXISTS listens_to_podcast_episode (
--     pe_title                           VARCHAR(128),
--     p_name                             VARCHAR(128),
--     u_email_id                         VARCHAR(128),
--     lpe_date                           DATE         NOT NULL,
--     PRIMARY KEY(p_name, pe_title, u_email_id),
--     INDEX f1(p_name, pe_title),
--     INDEX f2(u_email_id),
--     FOREIGN KEY(p_name, pe_title) REFERENCES PodcastEpisode(p_name, pe_title)
--         ON UPDATE CASCADE ON DELETE CASCADE,
--     FOREIGN KEY(u_email_id) REFERENCES User(u_email_id)
--         ON UPDATE CASCADE ON DELETE CASCADE
-- );

-- CREATE TABLE IF NOT EXISTS sings (
--     s_id                               INT,
--     a_email_id                         VARCHAR(128),
--     is_artist_collaborator_for_song    BOOLEAN      NOT NULL,
--     artist_type_for_song               VARCHAR(128) CHECK (artist_type_for_song IN ('Mucisian', 'Composer', 'Band')),
--     PRIMARY KEY(s_id, a_email_id),
--     FOREIGN KEY(s_id) REFERENCES Song(s_id)
--         ON UPDATE CASCADE ON DELETE CASCADE,
--     FOREIGN KEY(a_email_id) REFERENCES Artist(a_email_id)
--         ON UPDATE CASCADE ON DELETE CASCADE
-- );

-- CREATE TABLE IF NOT EXISTS assigned_to (
--     a_email_id                         VARCHAR(128),
--     l_name                             VARCHAR(128),
--     PRIMARY KEY(a_email_id, l_name),
--     FOREIGN KEY(l_name) REFERENCES Album(l_name)
--         ON UPDATE CASCADE ON DELETE CASCADE,
--     FOREIGN KEY(a_email_id) REFERENCES Artist(a_email_id)
--         ON UPDATE CASCADE ON DELETE CASCADE
-- );

-- CREATE TABLE IF NOT EXISTS features (
--     pe_title                           VARCHAR(128),
--     p_name                             VARCHAR(128),
--     g_email_id                         VARCHAR(128),
--     PRIMARY KEY(p_name, pe_title, g_email_id),
--     INDEX f1(p_name, pe_title),
--     INDEX f2(g_email_id),
--     FOREIGN KEY(p_name, pe_title) REFERENCES PodcastEpisode(p_name, pe_title)
--         ON UPDATE CASCADE ON DELETE CASCADE,
--     FOREIGN KEY(g_email_id) REFERENCES SpecialGuest(g_email_id
--         ON UPDATE CASCADE ON DELETE CASCADE 
-- );


-- -- SELECT * FROM BillingService;
-- -- SELECT * FROM Song;
-- -- SELECT * FROM Album;
-- -- SELECT * FROM Artist;
-- -- SELECT * FROM RecordLabel;
-- -- SELECT * FROM User;
-- -- SELECT * FROM Podcast;
-- -- SELECT * FROM PodcastHost;
-- -- SELECT * FROM PodcastEpisode;
-- -- SELECT * FROM SpecialGuest;
-- -- SELECT * FROM pays_to;
-- -- SELECT * FROM pays_to_host;
-- -- SELECT * FROM pays_to_record_label;
-- -- SELECT * FROM pays_to_artist;
-- -- SELECT * FROM collects_song_data;
-- -- SELECT * FROM listens_to_song;
-- -- SELECT * FROM collects_episode_data;
-- -- SELECT * FROM listens_to_podcast_episode;
-- -- SELECT * FROM sings;
-- -- SELECT * FROM assigned_to;
-- -- SELECT * FROM features;


SELECT * FROM BillingService;
SELECT * FROM Album;
SELECT * FROM RecordLabel;
SELECT * FROM User;
SELECT * FROM Podcast;
SELECT * FROM PodcastGenre;
SELECT * FROM PodcastHost;
SELECT * FROM SpecialGuest;
SELECT * FROM Song;
SELECT * FROM SongGenre;
SELECT * FROM Artist;
SELECT * FROM PodcastEpisode;
SELECT * FROM pays_to;
SELECT * FROM pays_to_host;
SELECT * FROM pays_to_record_label;
SELECT * FROM pays_to_artist;
SELECT * FROM collects_song_data;
SELECT * FROM listens_to_song;
SELECT * FROM collects_episode_data;
SELECT * FROM listens_to_podcast_episode;
SELECT * FROM sings;
SELECT * FROM assigned_to;
SELECT * FROM features;
